# -*- coding: utf-8 -*-
"""Train_n2v.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LWVTC_Gx11jozuQc9EM0UpILK2l4_8s-

**Author: Eric Schmidt** </br>
[GitHub](https://github.com/Nablaaa/CompetitionAssay)

This script is used for training n2v on the competition assay data of lucas

# Load Data for training to drive

e.g. load one dataset from WT and one from mutant as trainingsdata
"""

!pip install tensorflow==2.12.0
!pip install n2v

import numpy as np


import tensorflow as tf
import n2v
print(tf.__version__)
print(n2v.__version__)


from skimage.io import imread, imsave
import matplotlib.pyplot as plt

from n2v.internals.N2V_DataGenerator import N2V_DataGenerator
from n2v.models import N2VConfig, N2V
from csbdeep.utils import plot_history

def NormalizeImg(img):
    """Normalize img input by subtracting the mean
    and dividing by std"""
    img = img.astype("float32")
    img -= np.mean(img)
    img /= np.std(img)

    return img

"""**connect to drive**"""

from google.colab import drive
drive.mount('/content/drive')

WT_img = imread('WT_C2-MAX_20230424_5hpif_mix2_WTmScarlet_dwspFmNeonGreen_ours_R2_002-1.tif')
Mutant_img = imread('dwspF_C1-MAX_20230424_5hpif_mix2_WTmScarlet_dwspFmNeonGreen_ours_R2_002-1.tif')

"""# Prepare Data for n2v"""

base_dir = "/content/drive/MyDrive/Eric-Onlinestorage/Projekte/2023-CompetitionAssay_Lucas/"

datagen = N2V_DataGenerator()


WT_normalized = NormalizeImg(WT_img)
Mutant_normalized = NormalizeImg(Mutant_img)


print(WT_normalized.shape)
WT_normalized = np.expand_dims(WT_normalized,axis=-1)
print(WT_normalized.shape)

Mutant_normalized = np.expand_dims(Mutant_normalized,axis=-1)


imsave(based_dir + "WT_normalized.tif", WT_normalized)
imsave(based_dir + "Mutant_normalized.tif", Mutant_normalized)

imgs = datagen.load_imgs_from_directory(directory = base_dir,
                                        filter='*.tif',dims='YXC')  #ZYX for 3D

print(len(imgs))
print(imgs[0].shape)
print('The data type of the first image is: ', imgs[0].dtype)

patch_size = 64
patch_shape = (patch_size,patch_size)
patches = datagen.generate_patches_from_list(imgs, shape=patch_shape)

# reduce size for testing
# patches = patches[:500,:,:,:]

train_val_split = int(patches.shape[0] * 0.8)
X = patches[:train_val_split]
X_val = patches[train_val_split:]

print(X.shape)
print(X.dtype)
print(X_val.shape)

# Let's look at two patches. They must look different!
plt.figure(figsize=(14,7))
plt.subplot(1,2,1)
plt.imshow(X[0,:,:,0])
plt.title('Training Patch');
plt.subplot(1,2,2)
plt.imshow(X_val[0,:,:,0])
plt.title('Validation Patch');

"""# Train n2v"""

# train_steps_per_epoch is set to (number of training patches)/(batch size), like this each training patch
# is shown once per epoch.
train_batch = 32
config = N2VConfig(X, unet_kern_size=3,
                   unet_n_first=64, unet_n_depth=3, train_steps_per_epoch=int(X.shape[0]/train_batch), train_epochs=10, train_loss='mse',
                   batch_norm=True, train_batch_size=train_batch, n2v_perc_pix=0.198, n2v_patch_shape=(patch_size, patch_size),
                   n2v_manipulator='uniform_withCP', n2v_neighborhood_radius=5, single_net_per_channel=False)

# Let's look at the parameters stored in the config-object.
vars(config)

# a name used to identify the model --> change this to something sensible!
model_name = 'n2v_transwell'

# We are now creating our network model.
model = N2V(config, model_name, basedir=base_dir + "models")

# start training
history = model.train(X, X_val)

print(sorted(list(history.history.keys())))
plt.figure(figsize=(16,5))
plot_history(history,['loss','val_loss']);

"""# The model is exported and can be used for denoising now"""

model = N2V(config=None, name=model_name, basedir=base_dir+"models")
pred = model.predict(Mutant_normalized, axes='YXC')

imsave(base_dir + "Mutant_denoised.tif",pred[:,:,0])

pred = model.predict(WT_normalized, axes='YXC')

imsave(base_dir + "WT_denoised.tif",pred[:,:,0])

# Let's look at the results.
plt.figure(figsize=(16,8))
plt.subplot(1,2,1)
plt.imshow(Mutant_normalized[:,:,0])
plt.title('Input');
plt.subplot(1,2,2)
plt.imshow(pred[:,:,0])
plt.title('Prediction');